{"version":3,"file":"static/js/movies-page.72d74f47.chunk.js","mappings":"mOACA,EAA6B,+B,SCuG7B,EArFmB,WACjB,IAAMA,GAAWC,EAAAA,EAAAA,MACXC,GAAWC,EAAAA,EAAAA,MAEjB,GAAwCC,EAAAA,EAAAA,UAAS,IAAjD,eAAOC,EAAP,KAAqBC,EAArB,KACA,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAEMC,GAFN,KAEoBD,EAAaE,IAAI,WAErCC,EAAAA,EAAAA,YAAU,WACHF,GAGLG,EAAAA,GACoBH,GACjBI,MAAK,SAAAC,GAAM,OAAIR,EAAgBQ,EAAOC,cACxC,CAACN,IAEJ,OAKIO,EAAAA,EAAAA,IAAQ,CACVC,cAAe,CACbC,QAAS,MANXC,EADF,EACEA,SACAC,EAFF,EAEEA,aACAC,EAHF,EAGEA,MACaC,EAJf,EAIEC,UAAaD,OAiBf,OACE,iCACE,kBACEE,SAAUJ,GAbK,SAAC,GAAiB,IAAfF,EAAc,EAAdA,QACtBN,EAAAA,GACoBM,GACjBL,MAAK,SAAAC,GAAM,OAAIR,EAAgBQ,EAAOC,YAEzCM,IAEArB,GAAS,kBAAKE,GAAN,IAAgBuB,OAAO,SAAD,OAAWP,SAOrCQ,aAAa,MACbC,UAAWC,EAHb,WAKE,0BACEC,KAAK,OACLC,KAAK,UACLC,WAAS,GACLZ,EAAS,UAAW,CACtBa,UAAU,OAGd,mBAAQH,KAAK,SAAb,oBACCP,EAAOJ,UACN,iBAAMe,MAAO,CAAEC,QAAS,QAAxB,SACGC,EAAAA,GAAAA,MAAY,iCAKlB9B,EAAa+B,OAAS,IACrB,wBACG/B,EAAagC,KAAI,SAAAC,GAAK,OACrB,yBACE,SAAC,KAAD,CACEC,GAAE,mBAzEDC,EAyEuB,GAAD,OAAIF,EAAMG,MAAV,YAAmBH,EAAMI,IAxE9DC,GAAAA,CAAQH,EAAQ,CACdI,OAAO,EACPC,QAAQ,MAuEIC,MAAO,CACLC,KAAM,CACJ7C,SAAAA,EACA8C,MAAO,YALb,SASGV,EAAMG,SAVFH,EAAMI,IAvEV,IAAAF,Y,oLCbXS,EAAW,+BACXC,EAAU,mCAAhB,SAEeC,IAAAA,OAAAA,EAAAA,MAAAA,KAAAA,WAAAA,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,2GAAsCC,EAAtC,+BAA4C,GAAIC,EAAhD,+BAAyD,GAAzD,SACyBC,MAAMF,EAAKC,GADpC,YACQE,EADR,QAEkBC,GAFlB,iCAGYD,EAASE,OAHrB,gDAIMC,QAAQC,OAAO,IAAIC,MAAM,cAJ/B,2GAOO,SAASC,IACd,OAAOV,EAAuB,GAAD,OACxBF,EADwB,uCACeC,IAIvC,SAASY,EAAeC,GAC7B,OAAOZ,EAAuB,GAAD,OACxBF,EADwB,kBACNc,EADM,oBACab,IAIrC,SAASc,EAAeD,GAC7B,OAAOZ,EAAuB,GAAD,OACxBF,EADwB,kBACNc,EADM,4BACqBb,IAI7C,SAASe,EAAkBF,GAChC,OAAOZ,EAAuB,GAAD,OACxBF,EADwB,kBACNc,EADM,4BACqBb,IAI7C,SAASgB,EAAiBC,GAC/B,OAAOhB,EAAuB,GAAD,OACxBF,EADwB,iCACSC,EADT,kBAC0BiB,EAD1B","sources":["webpack:///./src/pages/MoviesPage/MoviesPage.module.css?7ea7","pages/MoviesPage/MoviesPage.js","services/movies-api.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"searchform\":\"MoviesPage_searchform__-j83n\"};","import { useState, useEffect } from 'react';\r\nimport {\r\n  Link,\r\n  useNavigate,\r\n  useLocation,\r\n  useSearchParams,\r\n} from 'react-router-dom';\r\nimport { useForm } from 'react-hook-form';\r\nimport { toast } from 'react-toastify';\r\nimport slugify from 'slugify';\r\nimport * as moviesAPI from 'services/movies-api';\r\nimport s from './MoviesPage.module.css';\r\n\r\nconst makeSlug = string =>\r\n  slugify(string, {\r\n    lower: true,\r\n    strict: true,\r\n  });\r\n\r\nconst MoviesPage = () => {\r\n  const navigate = useNavigate();\r\n  const location = useLocation();\r\n\r\n  const [searchMovies, setSearchMovies] = useState([]);\r\n  const [searchParams, setSearchParams] = useSearchParams();\r\n\r\n  const searchQuery = searchParams.get('query');\r\n\r\n  useEffect(() => {\r\n    if (!searchQuery) {\r\n      return;\r\n    }\r\n    moviesAPI\r\n      .fetchMovieSearch(searchQuery)\r\n      .then(movies => setSearchMovies(movies.results));\r\n  }, [searchQuery]);\r\n\r\n  const {\r\n    register,\r\n    handleSubmit,\r\n    reset,\r\n    formState: { errors },\r\n  } = useForm({\r\n    defaultValues: {\r\n      request: '',\r\n    },\r\n  });\r\n\r\n  const onSubmitForm = ({ request }) => {\r\n    moviesAPI\r\n      .fetchMovieSearch(request)\r\n      .then(movies => setSearchMovies(movies.results));\r\n\r\n    reset();\r\n\r\n    navigate({ ...location, search: `query=${request}` });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <form\r\n        onSubmit={handleSubmit(onSubmitForm)}\r\n        autoComplete=\"off\"\r\n        className={s.searchform}\r\n      >\r\n        <input\r\n          type=\"text\"\r\n          name=\"request\"\r\n          autoFocus\r\n          {...register('request', {\r\n            required: true,\r\n          })}\r\n        />\r\n        <button type=\"submit\">Search</button>\r\n        {errors.request && (\r\n          <span style={{ display: 'none' }}>\r\n            {toast.error('Please enter the request')}\r\n          </span>\r\n        )}\r\n      </form>\r\n\r\n      {searchMovies.length > 0 && (\r\n        <ul>\r\n          {searchMovies.map(movie => (\r\n            <li key={movie.id}>\r\n              <Link\r\n                to={`/movies/${makeSlug(`${movie.title} ${movie.id}`)}`}\r\n                state={{\r\n                  from: {\r\n                    location,\r\n                    label: 'Go back',\r\n                  },\r\n                }}\r\n              >\r\n                {movie.title}\r\n              </Link>\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default MoviesPage;\r\n","const BASE_URL = 'https://api.themoviedb.org/3';\r\nconst API_KEY = 'dc08feb60c6ae64654b90b4c6566ac10';\r\n\r\nasync function fetchWithErrorHandling(url = '', config = {}) {\r\n  const response = await fetch(url, config);\r\n  return response.ok\r\n    ? await response.json()\r\n    : Promise.reject(new Error('Not found'));\r\n}\r\n\r\nexport function fetchTrendingMovies() {\r\n  return fetchWithErrorHandling(\r\n    `${BASE_URL}/trending/movie/day?api_key=${API_KEY}`,\r\n  );\r\n}\r\n\r\nexport function fetchMovieById(movieId) {\r\n  return fetchWithErrorHandling(\r\n    `${BASE_URL}/movie/${movieId}?api_key=${API_KEY}`,\r\n  );\r\n}\r\n\r\nexport function fetchMovieCast(movieId) {\r\n  return fetchWithErrorHandling(\r\n    `${BASE_URL}/movie/${movieId}/credits?api_key=${API_KEY}`,\r\n  );\r\n}\r\n\r\nexport function fetchMovieReviews(movieId) {\r\n  return fetchWithErrorHandling(\r\n    `${BASE_URL}/movie/${movieId}/reviews?api_key=${API_KEY}`,\r\n  );\r\n}\r\n\r\nexport function fetchMovieSearch(query) {\r\n  return fetchWithErrorHandling(\r\n    `${BASE_URL}/search/movie?api_key=${API_KEY}&query=${query}&page=1`,\r\n  );\r\n}\r\n"],"names":["navigate","useNavigate","location","useLocation","useState","searchMovies","setSearchMovies","useSearchParams","searchParams","searchQuery","get","useEffect","moviesAPI","then","movies","results","useForm","defaultValues","request","register","handleSubmit","reset","errors","formState","onSubmit","search","autoComplete","className","s","type","name","autoFocus","required","style","display","toast","length","map","movie","to","string","title","id","slugify","lower","strict","state","from","label","BASE_URL","API_KEY","fetchWithErrorHandling","url","config","fetch","response","ok","json","Promise","reject","Error","fetchTrendingMovies","fetchMovieById","movieId","fetchMovieCast","fetchMovieReviews","fetchMovieSearch","query"],"sourceRoot":""}